#include "stdafx.h"
#include<stdio.h>
#include<stdlib.h>
#include<GL/glut.h>
//#include <GL/gl.h>
#define SPEED 30.0
#include<math.h>
#include<windows.h>

float i=0.0,m=0.0,n=0.0,o=0.0,c=0.0,b=0.0;
float p=0.75,q=0.47,r=0.14;
float e=0.90,f=0.91,g=0.98;
int count=0;
int flag=0;
float v,a,d,theta;
int light=1,day=1,plane=0,comet=0,xm=900,bird=0;
char ch;
GLfloat y,x;

void declare(char *string)
{
     while(*string)
        glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, *string++);
}

void circle(float v,float a,float d)
{
    glBegin(GL_POLYGON);
    for(i=a;i<d;i++)
    {
        theta=i*3.142/180;
        glVertex2f(v*cos(theta),v*sin(theta));
    }
    glEnd();

}

void draw_pixel(GLint cx, GLint cy)
{

	glBegin(GL_POINTS);
		glVertex2i(cx,cy);
	glEnd();
}

void plotpixels(GLint h,GLint k, GLint x,GLint y)
{
	draw_pixel(x+h,y+k);
	draw_pixel(-x+h,y+k);
	draw_pixel(x+h,-y+k);
	draw_pixel(-x+h,-y+k);
	draw_pixel(y+h,x+k);
	draw_pixel(-y+h,x+k);
	draw_pixel(y+h,-x+k);
	draw_pixel(-y+h,-x+k);
}

void draw_circle(GLint h, GLint k, GLint r)
{
	GLint d=1-r, x=0, y=r;
	while(y>x)
	{
		plotpixels(h,k,x,y);
		if(d<0) d+=2*x+3;
		else
		{
			d+=2*(x-y)+5;
			--y;
		}
		++x;
	}
	plotpixels(h,k,x,y);
}


void spin() {
	if(y<300)
		y+=0.3;
	

	if(x<300)
		x+=0.1;

	glutPostRedisplay();
}



void sun()
{

     //glPushMatrix();
   // glTranslatef(200,600,0);
   glColor3f(1,1,0);
    circle(60,0,360);  //BASE
    //glPopMatrix();


      glPushMatrix();
    glColor3f(1,0,0);
    glTranslatef(0,-10,0); //MOUTH
    glScalef(.2,.3,1);
    circle(80,180,360);
    glPopMatrix();


    glPushMatrix();
    glColor3f(1,1,1);
    glTranslatef(0,-10,0);  //MOUTH INNER
    glScalef(.3,0.2,1);
    circle(50,180,360);
    glPopMatrix();


    glPushMatrix();
    glColor3f(1,1,1);
    glTranslatef(-20,15,0);
    glScalef(.2,0.3,1);     //LEFT EYE
    circle(50,0,360);
    glPopMatrix();


     glPushMatrix();
    glColor3f(1,1,1);
    glTranslatef(20,15,0);  //RIGHT EYE
    glScalef(.2,0.3,1);
    circle(50,0,360);
    glPopMatrix();


    glPushMatrix();
    glColor3f(0,0,0);
    glTranslatef(20,10,0);  //RIGHT EYE BALL
    glScalef(.2,0.3,1);
    circle(35,0,360);
    glPopMatrix();




    glPushMatrix();
    glColor3f(0,0,0);
    glTranslatef(-20,10,0);
    glScalef(.2,0.3,1);     //LEFT EYE BALL
    circle(35,0,360);
    glPopMatrix();
    //glPopMatrix();
}

void draw_object()
{
int l;
if(day==1)
{
//sky
glColor3f(0.0,0.9,0.9);
glBegin(GL_POLYGON);
glVertex2f(0,380);
glVertex2f(0,700);
glVertex2f(1100,700);
glVertex2f(1100,380);
glEnd();



//sun
glPushMatrix();
glTranslatef(0,y,0);
glTranslatef(250,300,0);
sun();
glPopMatrix();










//cloud1
glPushMatrix();
glTranslatef(x,0,0);
	for(l=0;l<=20;l++)
	{
		glColor3f(1.0,1.0,1.0);
		draw_circle(160+m,625,l);

	}


	for(l=0;l<=35;l++)
	{
		glColor3f(1.0,1.0,1.0);
		draw_circle(200+m,625,l);
		draw_circle(225+m,625,l);
	}

	for(l=0;l<=20;l++)
	{
		glColor3f(1.0,1.0,1.0);
		draw_circle(265+m,625,l);
	}
	glPopMatrix();
//cloud2
glPushMatrix();
glTranslatef(x,0,0);

	for(l=0;l<=20;l++)
	{
		glColor3f(1.0,1.0,1.0);
		draw_circle(370+m,615,l);
}




	for(l=0;l<=35;l++)
	{

		glColor3f(1.0,1.0,1.0);
		draw_circle(410+m,615,l);
		draw_circle(435+m,615,l);
		draw_circle(470+m,615,l);
	}

for(l=0;l<=20;l++)
	{
		glColor3f(1.0,1.0,1.0);
		draw_circle(500+m,615,l);
}

glPopMatrix();






//water
//glColor3f(0.6,0.8,0.196078);
glColor3f(0,0,1.2);
glBegin(GL_POLYGON);
glVertex2f(0,160);
glVertex2f(0,380);
glVertex2f(1100,380);
glVertex2f(1100,160);
glEnd();

}


else
{

//sky
glColor3f(0.0,0.0,0.0);
glBegin(GL_POLYGON);
glVertex2f(0,380);
glVertex2f(0,700);
glVertex2f(1100,700);
glVertex2f(1100,380);
glEnd();






//moon
int l;

	for(l=0;l<=35;l++)
	{
		glColor3f(1.0,1.0,1.0);
		draw_circle(100,625,l);
	}

//star1

glColor3f(1.0,1.0,1.0);
glBegin(GL_TRIANGLES);
glVertex2f(575,653);
glVertex2f(570,645);
glVertex2f(580,645);
glVertex2f(575,642);
glVertex2f(570,650);
glVertex2f(580,650);
glEnd();

//star2
glColor3f(1.0,1.0,1.0);
glBegin(GL_TRIANGLES);
glVertex2f(975,643);
glVertex2f(970,635);
glVertex2f(980,635);
glVertex2f(975,632);
glVertex2f(970,640);
glVertex2f(980,640);
glEnd();

//star3
glColor3f(1.0,1.0,1.0);
glBegin(GL_TRIANGLES);
glVertex2f(875,543);
glVertex2f(870,535);
glVertex2f(880,535);
glVertex2f(875,532);
glVertex2f(870,540);
glVertex2f(880,540);
glEnd();

//star4
glColor3f(1.0,1.0,1.0);
glBegin(GL_TRIANGLES);
glVertex2f(375,598);
glVertex2f(370,590);
glVertex2f(380,590);
glVertex2f(375,587);
glVertex2f(370,595);
glVertex2f(380,595);
glEnd();

//star5
glColor3f(1.0,1.0,1.0);
glBegin(GL_TRIANGLES);
glVertex2f(750,628);
glVertex2f(745,620);
glVertex2f(755,620);
glVertex2f(750,618);
glVertex2f(745,625);
glVertex2f(755,625);
glEnd();

//star6
glColor3f(1.0,1.0,1.0);
glBegin(GL_TRIANGLES);
glVertex2f(200,628);
glVertex2f(195,620);
glVertex2f(205,620);
glVertex2f(200,618);
glVertex2f(195,625);
glVertex2f(205,625);
glEnd();

//star7
glColor3f(1.0,1.0,1.0);
glBegin(GL_TRIANGLES);
glVertex2f(100,528);
glVertex2f(95,520);
glVertex2f(105,520);
glVertex2f(100,518);
glVertex2f(95,525);
glVertex2f(105,525);
glEnd();

//star8
glColor3f(1.0,1.0,1.0);
glBegin(GL_TRIANGLES);
glVertex2f(300,468);
glVertex2f(295,460);
glVertex2f(305,460);
glVertex2f(300,458);
glVertex2f(295,465);
glVertex2f(305,465);
glEnd();

//star9
glColor3f(1.0,1.0,1.0);
glBegin(GL_TRIANGLES);
glVertex2f(500,543);
glVertex2f(495,535);
glVertex2f(505,535);
glVertex2f(500,532);
glVertex2f(495,540);
glVertex2f(505,540);
glEnd();




//grass
glColor3f(0.0,0.0,0.3);
glBegin(GL_POLYGON);
glVertex2f(0,160);
glVertex2f(0,380);
glVertex2f(1100,380);
glVertex2f(1100,160);
glEnd();

}

//Ground
	glColor3f(0.0,0.3,0.0);
	glBegin(GL_POLYGON);
		glVertex2f(-600,0);
		glVertex2f(-600,185);
		glVertex2f(1100,185);
		glVertex2f(1100,0);
	glEnd();

//tree
glPushMatrix();
glTranslatef(100,0,0);
glColor3f(0.9,0.2,0.0);
glBegin(GL_POLYGON);
glVertex2f(280,155);
glVertex2f(280,255);
glVertex2f(295,255);
glVertex2f(295,155);
glEnd();
glPopMatrix();

glPushMatrix();
glTranslatef(100,30,0);
for(l=0;l<=30;l++)
	{
		glColor3f(0.0,0.5,0.0);
		draw_circle(270,250,l);
		draw_circle(310,250,l);
	}

	for(l=0;l<=25;l++)
	{
		glColor3f(0.0,0.5,0.0);
		draw_circle(280,290,l);
		draw_circle(300,290,l);
	}

	for(l=0;l<=20;l++)
	{
		glColor3f(0.0,0.5,0.0);
		draw_circle(290,315,l);
	}
glPopMatrix();

//tree 1

glColor3f(0.9,0.2,0.0);
glBegin(GL_POLYGON);
glVertex2f(100,135);
glVertex2f(100,285);
glVertex2f(140,285);
glVertex2f(140,135);
glEnd();




	for(l=0;l<=40;l++)
	{
		glColor3f(0.0,0.5,0.0);
		draw_circle(40,280,l);
		draw_circle(90,280,l);
		draw_circle(150,280,l);
		draw_circle(210,280,l);
		draw_circle(65,340,l);
		draw_circle(115,340,l);
		draw_circle(175,340,l);

	}

	for(l=0;l<=55;l++)
	{
		glColor3f(0.0,0.5,0.0);
		draw_circle(115,360,l);


	}
	
	//tree 2
glPushMatrix();
glTranslatef(500,50,0);
glColor3f(0.9,0.2,0.0);
glBegin(GL_POLYGON);
glVertex2f(100,125);
glVertex2f(100,285);
glVertex2f(140,285);
glVertex2f(140,125);
glEnd();
glPopMatrix();


    glPushMatrix();
    glTranslatef(500,50,0);
	for(l=0;l<=40;l++)
	{
		glColor3f(0.0,0.5,0.0);
		draw_circle(40,280,l);
		draw_circle(90,280,l);
		draw_circle(150,280,l);
		draw_circle(210,280,l);
		draw_circle(65,340,l);
		draw_circle(115,340,l);
		draw_circle(175,340,l);

	}

	for(l=0;l<=55;l++)
	{
		glColor3f(0.0,0.5,0.0);
		draw_circle(115,360,l);


	}
    glPopMatrix();




   //tree 3

glPushMatrix();
glTranslatef(600,0,0);
glColor3f(0.9,0.2,0.0);
glBegin(GL_POLYGON);
glVertex2f(280,145);
glVertex2f(280,255);
glVertex2f(295,255);
glVertex2f(295,145);
glEnd();
glPopMatrix();

glPushMatrix();
glTranslatef(600,25,0);
for(l=0;l<=30;l++)
	{
		glColor3f(0.0,0.5,0.0);
		draw_circle(270,250,l);
		draw_circle(310,250,l);
	}

	for(l=0;l<=25;l++)
	{
		glColor3f(0.0,0.5,0.0);
		draw_circle(280,290,l);
		draw_circle(300,290,l);
	}

	for(l=0;l<=20;l++)
	{
		glColor3f(0.0,0.5,0.0);
		draw_circle(290,315,l);
	}
	glPopMatrix();

	glPushMatrix();
	glTranslatef(x,y,0);
	if(bird==1)
	{
	glColor3f(0.0,0.0,0.0);
	glBegin(GL_POLYGON);

		glVertex2f(300+i-xm,250+b);
		glVertex2f(330+i-xm,250+b);
		glVertex2f(330+i-xm,280+b);


	glEnd();

	glColor3f(0.73,0.16,0.96 );
	glBegin(GL_POLYGON);

		glVertex2f(300+i-xm,265+b);
		glVertex2f(330+i-xm,265+b);
		glVertex2f(330+i-xm,250+b);


	glEnd();

	glBegin(GL_POLYGON);

		glVertex2f(330+i-xm,275+b);
		glVertex2f(340+i-xm,275+b);
		glVertex2f(330+i-xm,265+b);


	glEnd();

	//

	glBegin(GL_POLYGON);

		glVertex2f(200+i-xm,285+b);
		glVertex2f(230+i-xm,285+b);
		glVertex2f(230+i-xm,270+b);

	glEnd();

	glBegin(GL_POLYGON);

		glVertex2f(230+i-xm,295+b);
		glVertex2f(240+i-xm,295+b);
		glVertex2f(230+i-xm,285+b);


	glEnd();


	//

	glBegin(GL_POLYGON);

		glVertex2f(150+i-xm,285+b);
		glVertex2f(180+i-xm,285+b);
		glVertex2f(180+i-xm,270+b);

	glEnd();

	glBegin(GL_POLYGON);

		glVertex2f(180+i-xm,295+b);
		glVertex2f(190+i-xm,295+b);
		glVertex2f(180+i-xm,285+b);


	glEnd();


}

	glPopMatrix();

glFlush();
}


void idle()
{

if(light==0 && (i>=0 && i<=1150))
 {

	 i+=SPEED/10;
     m+=SPEED/150;
	n-=2;
	 o+=0.2;
	c+=2;

 }

 if(light==0 && (i>=2600 && i<=3000))
 {

	 i+=SPEED/10;
	 m+=SPEED/150;
	n-=2;
	 o+=0.2;
	c+=2;

 }

if(light==0)
 {
	 i=i;
	 m+=SPEED/150;
	n-=2;
	 o+=0.2;
	c+=2;

 }
if(count<=3)
{

glClearColor(1.0,1.0,1.0,1.0);

     i+=SPEED/10;
     b+=SPEED/10;
     m+=SPEED/150;
	n-=2;
	 o+=0.2;
	c+=2;
}
if(i>1900)
	 i=800.0;
if(m>1100)
	 m=0.0;
if( o>75)
 {
	plane=0;
 }
if(c>500)
 {
	comet=0;
 }
if(b>500)
{
	b=0.0;
	i=800.0;
	count=count+1;

}

glutPostRedisplay();

}

void mouse(int btn,int state,int x,int y)
{
	if(btn==GLUT_LEFT_BUTTON && state==GLUT_UP)
exit(0);
}

void myinit()
{
glClearColor(1.0,1.0,1.0,1.0);
glColor3f(0.0,0.0,1.0);
glPointSize(2.0);
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
gluOrtho2D(0.0,1100.0,0.0,700.0);
}
void bitmap_output(int x,int y,char *string,void * font)
{
	int len,i;
	glRasterPos2f(x,y);
	len=(int)strlen(string);
	for(i=0;i<len;i++)
	{
		glutBitmapCharacter(font,string[i]);
	}
}

void mykeyboardFunc( unsigned char key, int x, int y )
{


	if(key==13)
		flag=1;
			//nbreak;
		


		switch( key )
    {

case 'd':
	case 'D':
		day=1;
		p=0.75;
		q=0.47;
		r=0.14;
		break;

	case 'n':
case 'N':
		day=0;
		p=0.52;
		q=0.37;
		r=0.26;
		break;

case 'b':
case 'B':
		bird=1;
		i=800;
		b=0.0;
		count=0;
		break;


		}
		glutPostRedisplay();


}





void display1()
{

glClear(GL_COLOR_BUFFER_BIT);

	glClear(GL_COLOR_BUFFER_BIT);
	glBegin(GL_POLYGON);
	glColor3f(0,0,0);
	glVertex2f(0,0);
	glVertex2f(1100,0);
	glVertex2f(1100,700);
	glVertex2f(0,700);
	glEnd();
	glColor3f(1,1,1);
	bitmap_output(258,630,"ALVAS'S INSTITUTE OF ENGINEERING AND TECHNOLOGY",GLUT_BITMAP_TIMES_ROMAN_24);
	glColor3f(1,1,1);
	bitmap_output(258,590,"DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING",GLUT_BITMAP_TIMES_ROMAN_24);
	glColor3f(1,0,1);
	bitmap_output(450,530,"A Mini Project On",GLUT_BITMAP_TIMES_ROMAN_24);
	glColor3f(0.5,0.8,0);
	bitmap_output(400,480,"SIMPLE NATURE AND SUNRISE",GLUT_BITMAP_TIMES_ROMAN_24);
	glColor3f(1,0,1);
	bitmap_output(200,420,"By,",GLUT_BITMAP_TIMES_ROMAN_24);
	glColor3f(1,0,0);
	bitmap_output(210,370,"Vignesha M. Shetty   4AL16CS124",GLUT_BITMAP_TIMES_ROMAN_24);
	glColor3f(1,0,0);
	bitmap_output(210,330,"Manoj L  4AL16CS125",GLUT_BITMAP_TIMES_ROMAN_24);
	glColor3f(1,0,1);
	bitmap_output(450,240,"Guide",GLUT_BITMAP_TIMES_ROMAN_24);
	glColor3f(1,0,0);
	bitmap_output(400,200,"Mr. Tahir Naquesh",GLUT_BITMAP_TIMES_ROMAN_24);
	glColor3f(1,0,0);
	bitmap_output(559,110,"-------------",GLUT_BITMAP_TIMES_ROMAN_24);
	glColor3f(1,0,0);
	bitmap_output(567,90,"PRESS ENTER",GLUT_BITMAP_TIMES_ROMAN_24);
	glColor3f(1,0,0);
	bitmap_output(559,70,"-------------",GLUT_BITMAP_TIMES_ROMAN_24);
	glEnd();
	glFlush();
	glutSwapBuffers();

}
void display2()
{

glClear(GL_COLOR_BUFFER_BIT);
draw_object();
//glTranslatef(250,600,0);
//sun();
glutPostRedisplay();
glFlush();
//glutSwapBuffers();
}



void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT);
	
     if(flag==0)
display1();

	else if(flag==1)
		display2();
}



int main(int argc,char** argv)
{

	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
	glutInitWindowSize(1100.0,700.0);
	glutInitWindowPosition(0,0);
	glutCreateWindow("SIMPLE NATURE AND SUNRISE");
	glutDisplayFunc(display);
    glutIdleFunc(idle);
     glutIdleFunc(spin);
	// glutIdleFunc(spin1);
	//glutKeyboardFunc(keyboardFunc);
    glutKeyboardFunc(mykeyboardFunc);
	//SglutMouseFunc(myMouse1);
	myinit();
	glutSwapBuffers();
	glEnable(GL_SMOOTH);

	glutMainLoop();
	return 0;
}

